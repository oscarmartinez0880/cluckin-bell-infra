# Example Kubernetes Ingress configurations for Cluckin' Bell application
# These examples demonstrate how to use the deployed DNS/TLS controllers
# Note: For standardized deployments, use the Helm charts or Kustomize overlays in /templates/

# Frontend Ingress with ALB and automatic HTTPS (Development)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cluckin-bell-frontend
  namespace: cluckin-bell
  annotations:
    # AWS Load Balancer Controller annotations
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    
    # cert-manager annotation for automatic SSL certificate
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # external-dns annotation for automatic DNS record creation
    external-dns.alpha.kubernetes.io/hostname: dev.cluckn-bell.com
    
    # Optional: Custom ALB settings
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
spec:
  ingressClassName: alb
  tls:
  - hosts:
    - dev.cluckn-bell.com  # Development environment domain
    secretName: cluckin-bell-frontend-tls
  rules:
  - host: dev.cluckn-bell.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cluckin-bell-app
            port:
              number: 80

---

# API Ingress with ALB and automatic HTTPS (Development)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cluckin-bell-api
  namespace: cluckin-bell
  annotations:
    # AWS Load Balancer Controller annotations
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    
    # cert-manager annotation for automatic SSL certificate
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # external-dns annotation for automatic DNS record creation
    external-dns.alpha.kubernetes.io/hostname: api.dev.cluckn-bell.com
    
    # API-specific ALB settings
    alb.ingress.kubernetes.io/healthcheck-path: /api/health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '10'
    
    # CORS headers for API
    alb.ingress.kubernetes.io/actions.cors: |
      {
        "Type": "forward",
        "ForwardConfig": {
          "TargetGroups": [
            {
              "ServiceName": "wingman-api",
              "ServicePort": 80,
              "Weight": 100
            }
          ]
        }
      }
spec:
  ingressClassName: alb
  tls:
  - hosts:
    - api.dev.cluckn-bell.com  # Development API domain
    secretName: cluckin-bell-api-tls
  rules:
  - host: api.dev.cluckn-bell.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wingman-api
            port:
              number: 80

---

# Example Deployment with environment-specific image tagging (Development)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluckin-bell-app
  namespace: cluckin-bell
  labels:
    app: cluckin-bell-app
    environment: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluckin-bell-app
  template:
    metadata:
      labels:
        app: cluckin-bell-app
        environment: dev
    spec:
      containers:
      - name: cluckin-bell-app
        # Development uses nonprod ECR repository with 'dev' tag
        image: 264765154707.dkr.ecr.us-east-1.amazonaws.com/cluckin-bell-app:dev
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: development
        - name: LOG_LEVEL
          value: debug
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi

---

# Example API Deployment with environment-specific image tagging (Development)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wingman-api
  namespace: cluckin-bell
  labels:
    app: wingman-api
    environment: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wingman-api
  template:
    metadata:
      labels:
        app: wingman-api
        environment: dev
    spec:
      containers:
      - name: wingman-api
        # Development uses nonprod ECR repository with 'dev' tag
        image: 264765154707.dkr.ecr.us-east-1.amazonaws.com/wingman-api:dev
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          value: development
        - name: LOG_LEVEL
          value: debug
        - name: API_VERSION
          value: v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi

---

# Example with staging certificate for development/testing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cluckin-bell-staging
  namespace: cluckin-bell
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Use staging issuer for non-production environments
    cert-manager.io/cluster-issuer: letsencrypt-staging
    
    external-dns.alpha.kubernetes.io/hostname: staging.dev.cluckn-bell.com
spec:
  ingressClassName: alb
  tls:
  - hosts:
    - staging.dev.cluckn-bell.com
    secretName: cluckin-bell-staging-tls
  rules:
  - host: staging.dev.cluckn-bell.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cluckin-bell-app
            port:
              number: 80

---

# Example Certificate resource (usually created automatically by cert-manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cluckin-bell-wildcard
  namespace: cluckin-bell
spec:
  secretName: cluckin-bell-wildcard-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - cluckn-bell.com
  - "*.cluckn-bell.com"

---

# Production deployment example showing different ECR repository and tag
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluckin-bell-app-prod-example
  namespace: cluckin-bell
  labels:
    app: cluckin-bell-app
    environment: prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cluckin-bell-app
  template:
    metadata:
      labels:
        app: cluckin-bell-app
        environment: prod
    spec:
      containers:
      - name: cluckin-bell-app
        # Production uses prod ECR repository with 'prod' tag
        image: 346746763840.dkr.ecr.us-east-1.amazonaws.com/cluckin-bell-app:prod
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: production
        - name: LOG_LEVEL
          value: warn
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi